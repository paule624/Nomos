const cloudinary = require("../config/cloudinary");
const CloudinaryImage = require("../models/cloudinaryImage");

/**
 * Upload une image sur Cloudinary √† partir d'un buffer
 * @param {Buffer} buffer - Image en m√©moire
 * @returns {Promise<Object>} - R√©sultat de l'upload Cloudinary
 */
const uploadToCloudinary = async (buffer) => {
  return new Promise((resolve, reject) => {
    const stream = cloudinary.uploader.upload_stream(
      { folder: "articles_images" }, // üìÇ Dossier Cloudinary (modifiable)
      (error, result) => {
        if (error) return reject(error);
        resolve(result);
      }
    );
    stream.end(buffer);
  });
};

/**
 * Upload une image sur Cloudinary et l'enregistre en base de donn√©es
 * @param {Object} file - Fichier re√ßu via Multer
 * @returns {Promise<Object>} - Image enregistr√©e en BDD
 */
const createCloudinaryImage = async (file) => {
  try {
    if (!file) throw new Error("Aucun fichier re√ßu");

    // Upload sur Cloudinary
    const uploadResult = await uploadToCloudinary(file.buffer);

    // V√©rifie que uploadResult contient un public_id
    console.log(uploadResult); // Log du r√©sultat de l'upload
    if (!uploadResult.public_id) {
      throw new Error("Public ID est manquant dans la r√©ponse de Cloudinary");
    }

    // Enregistrement en base de donn√©es
    const cloudinaryImage = await CloudinaryImage.create({
      image_url: uploadResult.secure_url,
      public_id: uploadResult.public_id, // üîë Permet de supprimer l‚Äôimage plus tard
      image_type: "article", // Peut √™tre dynamique selon le contexte
    });

    return cloudinaryImage;
  } catch (error) {
    throw new Error("Erreur lors de l'upload : " + error.message);
  }
};

/**
 * R√©cup√®re toutes les images stock√©es en base de donn√©es
 * @returns {Promise<Array>} - Liste des images
 */
const getAllCloudinaryImages = async () => {
  try {
    return await CloudinaryImage.findAll();
  } catch (error) {
    throw new Error("Erreur lors de la r√©cup√©ration des images : " + error.message);
  }
};

/**
 * Supprime une image de Cloudinary et de la base de donn√©es
 * @param {string} id - ID de l'image en base de donn√©es
 * @returns {Promise<boolean>} - `true` si la suppression a r√©ussi
 */
const deleteCloudinaryImage = async (id) => {
  try {
    // Recherche l'image en BDD
    const cloudinaryImage = await CloudinaryImage.findByPk(id);
    if (!cloudinaryImage) {
      throw new Error("Image non trouv√©e");
    }

    // Suppression sur Cloudinary
    await cloudinary.uploader.destroy(cloudinaryImage.public_id);

    // Suppression en base de donn√©es
    await cloudinaryImage.destroy();

    return true;
  } catch (error) {
    throw new Error("Erreur lors de la suppression de l'image : " + error.message);
  }
};

module.exports = {
  createCloudinaryImage,
  getAllCloudinaryImages,
  deleteCloudinaryImage
};
